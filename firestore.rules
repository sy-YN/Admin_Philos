rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a strict user-ownership model for user profiles.
     * @dataStructure All user data is stored under the `/users/{userId}` path, where `{userId}` corresponds to the Firebase Auth UID.
     * @keySecurityDecisions Users can only read and write their own profile data.  Listing all users is disallowed.
     * @denormalizationForAuthorization  The `userId` is denormalized into the document path, which simplifies ownership checks.
     */

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile if request.auth.uid == 'user123' and the document exists.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the current user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the current user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the current user is the owner of the existing document
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile if the UID matches.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Allow a user to read their own profile.
      allow get: if isOwner(userId);

      // Allow a user to update their own profile, ensuring the UID remains consistent.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Allow a user to delete their own profile, if the document exists.
      allow delete: if isExistingOwner(userId);

      // Disallow listing all users.
      allow list: if false;
    }
  }
}