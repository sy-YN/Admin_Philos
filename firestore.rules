/**
 * @file GitSpace Firestore Security Rules
 *
 * @description This ruleset enforces a user-ownership model for user profiles and a role-based access control model for workspaces, members, and tabs. It prioritizes Authorization Independence by denormalizing a `members` map to each document, avoiding costly `get()` operations and complex hierarchical checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated user can read and write their own profile.
 * - /workspaces/{workspaceId}: Stores workspace information. Access is controlled via a `members` map on the document.
 * - /workspaces/{workspaceId}/members/{memberId}: Stores membership information for each workspace. Access is controlled via a denormalized `members` map on the document, copied from the parent workspace.
 * - /workspaces/{workspaceId}/tabs/{tabId}: Stores tab information for each workspace. Access is controlled via a denormalized `members` map on the document, copied from the parent workspace.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the authenticated user.
 * - Workspaces, members, and tabs use a shared access model, with roles defined in the `members` map.
 * - Authorization Independence is achieved by copying the `members` map to subcollection documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete): If the authenticated user's ID matches the {userId}.
     * @deny (get): If the authenticated user's ID does not match the {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to workspaces.
     * @path /workspaces/{workspaceId}
     * @allow (get, list): Public read access for all workspaces.
     * @allow (create): If the user is authenticated and the `ownerId` matches the `request.auth.uid`.
     * @allow (update, delete): If the user is the owner (`ownerId` matches the `request.auth.uid`).
     * @deny (create, update, delete): If the user is not authenticated or not the owner.
     * @principle Enforces owner-only writes for workspaces.
     */
    match /workspaces/{workspaceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to members within a workspace.
     * @path /workspaces/{workspaceId}/members/{memberId}
     * @allow (get, list): If the authenticated user is a member of the workspace (present in the `members` map).
     * @allow (create): If the authenticated user is a member of the workspace (present in the `members` map).
     * @allow (update, delete): If the authenticated user is an admin of the workspace (role is 'admin' in the `members` map).
     * @deny (create, update, delete): If the user is not a member or not an admin.
     * @principle Enforces role-based access control for members based on the `members` map in the workspace.
     */
    match /workspaces/{workspaceId}/members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isWorkspaceMember(workspaceId) {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] != null;
      }

      function isWorkspaceAdmin(workspaceId) {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] == 'admin';
      }

      function isExistingWorkspaceAdmin(workspaceId) {
        return isWorkspaceAdmin(workspaceId) && resource != null;
      }

      allow get, list: if isSignedIn() && isWorkspaceMember(workspaceId);
      allow create: if isSignedIn() && isWorkspaceMember(workspaceId);
      allow update: if isSignedIn() && isWorkspaceAdmin(workspaceId);
      allow delete: if isExistingWorkspaceAdmin(workspaceId);
    }

    /**
     * @description Controls access to tabs within a workspace.
     * @path /workspaces/{workspaceId}/tabs/{tabId}
     * @allow (get, list): If the authenticated user is a member of the workspace (present in the `members` map).
     * @allow (create): If the authenticated user is a member of the workspace (present in the `members` map).
     * @allow (update, delete): If the authenticated user is an admin of the workspace (role is 'admin' in the `members` map).
     * @deny (create, update, delete): If the user is not a member or not an admin.
     * @principle Enforces role-based access control for tabs based on the `members` map in the workspace.
     */
    match /workspaces/{workspaceId}/tabs/{tabId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isWorkspaceMember(workspaceId) {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] != null;
      }

      function isWorkspaceAdmin(workspaceId) {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] == 'admin';
      }

      function isExistingWorkspaceAdmin(workspaceId) {
        return isWorkspaceAdmin(workspaceId) && resource != null;
      }

      allow get, list: if isSignedIn() && isWorkspaceMember(workspaceId);
      allow create: if isSignedIn() && isWorkspaceMember(workspaceId);
      allow update: if isSignedIn() && isWorkspaceAdmin(workspaceId);
      allow delete: if isExistingWorkspaceAdmin(workspaceId);
    }
  }
}