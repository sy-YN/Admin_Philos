/**
 * @file Firebase Security Rules for GitSpace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a role-based access control model for workspaces, members, and tabs.
 * Authorization independence is achieved by denormalizing the `members` map to subcollections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /workspaces/{workspaceId}: Stores workspace data. Access is controlled via a 'members' map on the document.
 * - /workspaces/{workspaceId}/members/{memberId}: Stores member data for a workspace.  Access is controlled via a denormalized 'members' map on the document.
 * - /workspaces/{workspaceId}/tabs/{tabId}: Stores tab data for a workspace. Access is controlled via a denormalized 'members' map on the document.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profiles.
 * - Workspaces are secured using a collaborative access pattern, with roles defined in the 'members' map.
 * - Member and Tab subcollections inherit access control from their parent workspace via the denormalized 'members' map.
 * - Data validation is minimized in this prototyping phase to allow for rapid iteration on the data model.  Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * - The 'members' map is denormalized from workspaces to members and tabs to avoid expensive `get()` calls. This allows for efficient authorization checks at each level of the data hierarchy.
 *
 * Structural Segregation:
 * - User data is stored under `/users/{userId}`, enforcing strict data isolation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.  Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile if authenticated as 'user456'.
     * @deny (get, update, delete) User with ID 'user123' cannot read/update/delete the profile if authenticated as 'user456'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId); //  && request.resource.data.id == resource.data.id;  Removed immutability to allow prototyping
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to workspace documents.  Access is role-based, managed via the 'members' map on the document.
     * @path /workspaces/{workspaceId}
     * @allow (get, list) Any authenticated user can read the workspace details.
     * @allow (create) User with ID 'user123' can create a workspace if authenticated as 'user123'. They will be the owner.
     * @allow (update, delete) User with ID 'user123' can update/delete the workspace if they are the owner (admin role).
     * @deny (create) User with ID 'user123' cannot create a workspace if authenticated as 'user456'.
     * @deny (update, delete) User with ID 'user123' cannot update/delete the workspace if they are not an admin.
     * @principle Enforces role-based access control for workspaces using the 'members' map.
     */
    match /workspaces/{workspaceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isWorkspaceMember() {
          return isSignedIn() && resource.data.members[request.auth.uid] != null;
      }

      function isWorkspaceAdmin() {
          return isSignedIn() && resource.data.members[request.auth.uid] == 'admin';
      }

      function isExistingWorkspaceAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] == 'admin';
      }

      allow get, list: if isSignedIn(); // Public read access

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingWorkspaceAdmin();
      allow delete: if isExistingWorkspaceAdmin();
    }

    /**
     * @description Controls access to member documents within a workspace.  Access is determined by the 'members' map inherited from the parent workspace.
     * @path /workspaces/{workspaceId}/members/{memberId}
     * @allow (get, list) Any workspace member can read the member details.
     * @allow (create) Workspace admin can create new members.
     * @allow (update, delete) Workspace admin can update/delete members.
     * @deny (create) Non-admin users cannot create members.
     * @deny (update, delete) Non-admin users cannot update/delete members.
     * @principle Enforces role-based access control for members, inheriting permissions from the parent workspace.
     */
    match /workspaces/{workspaceId}/members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isWorkspaceMember() {
          return isSignedIn() && get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] != null;
      }

      function isWorkspaceAdmin() {
          return isSignedIn() && get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] == 'admin';
      }

      function isExistingWorkspaceAdmin() {
          return isWorkspaceAdmin() && existsAfter(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(memberId));
      }

      allow get, list: if isWorkspaceMember();
      allow create: if isWorkspaceAdmin() && request.resource.data.workspaceId == workspaceId;
      allow update: if isWorkspaceAdmin();
      allow delete: if isWorkspaceAdmin();
    }

    /**
     * @description Controls access to tab documents within a workspace.  Access is determined by the 'members' map inherited from the parent workspace.
     * @path /workspaces/{workspaceId}/tabs/{tabId}
     * @allow (get, list) Any workspace member can read the tab details.
     * @allow (create) Workspace admin can create new tabs.
     * @allow (update, delete) Workspace admin can update/delete tabs.
     * @deny (create) Non-admin users cannot create tabs.
     * @deny (update, delete) Non-admin users cannot update/delete tabs.
     * @principle Enforces role-based access control for tabs, inheriting permissions from the parent workspace.
     */
    match /workspaces/{workspaceId}/tabs/{tabId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isWorkspaceMember() {
          return isSignedIn() && get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] != null;
      }

      function isWorkspaceAdmin() {
          return isSignedIn() && get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members[request.auth.uid] == 'admin';
      }

      function isExistingWorkspaceAdmin() {
          return isWorkspaceAdmin() && existsAfter(/databases/$(database)/documents/workspaces/$(workspaceId)/tabs/$(tabId));
      }

      allow get, list: if isWorkspaceMember();
      allow create: if isWorkspaceAdmin() && request.resource.data.workspaceId == workspaceId;
      allow update: if isWorkspaceAdmin();
      allow delete: if isWorkspaceAdmin();
    }
  }
}