/**
 * @fileoverview Firestore Security Rules for Philos App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles stored
 * under the `/users/{userId}` path. Only the authenticated user can create,
 * read, update, or delete their own profile. This ensures that users can only
 * manage their own data and prevents unauthorized access.
 *
 * Data Structure:
 * User profiles are stored in the `/users/{userId}` collection, where `{userId}`
 * corresponds to the Firebase Authentication UID of the user. Each document
 * contains user-specific information as defined in the User schema.
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the user themselves.
 * - The `uid` field within each user document must match the document ID (`userId`)
 *   to prevent spoofing or unauthorized data modification.
 *
 * Denormalization for Authorization:
 * The `uid` is used to check the authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile information.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete the profile at /users/user123.
     * @principle Enforces user-ownership; only the authenticated user can manage their profile.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is disallowed.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }
  }
}